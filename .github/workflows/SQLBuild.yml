name: Run SQL Build Automation

on:
  workflow_dispatch:
    inputs:      
      servernames:        
        description: 'List of servers you require the run the build on (enter in Primary,Secondary,RS order) e.g., SERVER1,SERVER2'
        required: true
        default: 'emeuw2hda-dbs01.shared-services.emis-web.com'
      authority:        
        description: 'England, Scotland, IoM, NI, Jersey, Wales etc'
        required: true
        default: 'England'

jobs:


  Prepare:
    runs-on: [self-hosted, windows]
    steps:
      - name: Checkout repository
        #This step checks out the repository so that the workflow can access its contents
        uses: actions/checkout@v4

      - name: Setup DBATools
        # Step to set up the PowerShell environment
        shell: powershell
        run: Import-Module dbatools


      - name: Validate Parameters
        # Validate the input parameters to ensure they are not empty
        shell: powershell
        run: |
          Write-Host "Validating Parameters."
          $script = ".\Build Functions\Functions-DBAVerifyParameters.ps1" 
          $servernames = "${{ github.event.inputs.servernames }}"
          $authority = "${{ github.event.inputs.authority }}"

          # Execute the script to validate the parameters
          & $script -SQLServers $servernames -Authority $authority -ErrorAction Stop        
        
      - name: Get SQL Server names
        # This step retrieves the SQL Server names from the provided server names ready to upload as an artifact
        shell: powershell
        run: |
          $servernames = "${{ github.event.inputs.servernames }}" -split ',' | ForEach-Object { $_.Trim() }
          # Initialize the servernames.txt file to ensure it's empty before writing new data
          Set-Content -Path servernames.txt -Value ""
          Write-Host "============================================================"
          foreach ($server in $servernames) {
            # Loop through each server name provided in the input
            Write-Host "Processing server: $server"
            try {
            Add-Content -Path servernames.txt -Value ($server -join "`n")
                            
            } catch {
            Write-Host "Error: Failed to get SQL Server names for ${server}."
            Write-Host "Exception Message: $($_.Exception.Message)"
            Write-Host "Exception Details: $($_ | Out-String)"
            exit 1
            }
            }
            #Cleanup the empty lines in the instances.txt file
            (Get-Content -Path servernames.txt) | Where-Object { $_.Trim() -ne "" } | Set-Content -Path servernames.txt 


      - name: Upload servernames artifact
        uses: actions/upload-artifact@v4
        with:
          name: servernames
          path: servernames.txt

      - name: Get SQL Instance names
        # Get SQL Server instances from the provided server names
        # This step uses the dbatools module to retrieve SQL Server instances ready to upload as an artifact
        shell: powershell
        run: |
          $servernames = "${{ github.event.inputs.servernames }}" -split ',' | ForEach-Object { $_.Trim() }
          
          # Initialize the instances.txt file to ensure it's empty before writing new data
          Set-Content -Path instances.txt -Value ""

          Write-Host "============================================================"
          Write-Host "Getting SQL Server instances for ${servernames}"
          foreach ($server in $servernames) {
            # Loop through each server name provided in the input
            Write-Host "Processing server: $server"
            try {
            $instances = Get-DbaService -ComputerName $server -Type Engine -EnableException | Where-Object { $_.State -eq 'Running' } |
            ForEach-Object { "$($_.ComputerName)\$($_.InstanceName)" }
            Write-Host "SQL Server instances found:"
            $instances
            Write-Host "============================================================"
            # Save instances to file for later steps
            Add-Content -Path instances.txt -Value ($instances -join "`n")
                            
            } catch {
            Write-Host "Error: Failed to get SQL Server instances for ${server}."
            Write-Host "Exception Message: $($_.Exception.Message)"
            Write-Host "Exception Details: $($_ | Out-String)"
            exit 1
            }
            }
            #Cleanup the empty lines in the instances.txt file
            (Get-Content -Path instances.txt) | Where-Object { $_.Trim() -ne "" } | Set-Content -Path instances.txt           

      - name: Upload instances artifact
        uses: actions/upload-artifact@v4
        with:
          name: sqlinstances
          path: instances.txt


  Approval_Gate_1:
    runs-on: [self-hosted, windows]
    needs: Prepare
    environment:
      name: approval-gate-1
    steps:
      - name: Wait for approval before proceeding. Verify parameters
        run: echo "Approval 1 granted."

  Pre_Build:
    runs-on: [self-hosted, windows]
    needs: Approval_Gate_1
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: servernames

      - name: Print servernames in Pre Build
        shell: powershell
        run: |
          $servers = Get-Content servernames.txt -Raw
          foreach ($server in $servers -split ',') {
            Write-Host "Pre Build Server: $server"
          }

      - name: Windows Failover Cluster checks
        # This step checks the Windows Failover Cluster configuration
        shell: powershell
        run: |
          Write-Host "SQL_DBAWindowsClusterChecks"

      - name: SQL Server Collation checks
        # This step checks the SQL Server collation settings
        shell: powershell
        run: |
          Write-Host "SQL_DBASQLCollationCheck"

      - name: SQL Installation Path checks
        # This step checks the SQL Server installation path
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckSQLInstallPath"
      
      - name: SQL Build Version checks
        # This step checks the SQL Server build version
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckSQLBuild"

      - name: SQL Instance Name checks
        # This step checks the SQL Server instance name
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckSQLInstanceName"

      - name: SQL Default Paths checks
        # This step checks the default paths for SQL Server data and log files
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckDBADefaultPaths"

      - name: SQL Port checks
        # This step checks the SQL Server port configuration
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckSQLPort"

      - name: Windows version and SQL Edition checks
        # This step checks the Windows version and SQL Server edition
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckWinVerSQLEdition"

      - name: SQL Windows Authentication checks
        # This step checks the SQL Server Windows Authentication configuration
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckSQLWindowsAuth"

      - name: SQL Always On AG name checks
        # This step checks the SQL Server Always On Availability Group name
        shell: powershell
        run: |
          Write-Host "SQL_DBASQLCheckAGName"

      - name: SQL Always On Backups Preferences checks
        # This step checks the SQL Server Always On Availability Group backup preferences
        shell: powershell
        run: |
          Write-Host "SQL_DBASQLAGBackupPreferences"





  Database_Deployments:
    runs-on: [self-hosted, windows]
    needs: Pre_Build
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: servernames
      - name: Print servernames in database_deployments
        shell: powershell
        run: |
          $servers = Get-Content servernames.txt -Raw
          foreach ($server in $servers -split ',') {
            Write-Host "database_deployments Server: $server"
          }

      - name: Deploy EMISGroupDBA Database
        # This step deploys the EMISGroupDBA database
        shell: powershell
        run: |
          Write-Host "SQL_DBADeployEMISGroupDBA"

      - name: Configure TempDB
        # This step configures the TempDB settings
        shell: powershell
        run: |
          Write-Host "SQL_DBAAdjustTempDB"

      - name: Set EMISGroupDBA Service
        # This step sets the EMISGroupDBA service
        shell: powershell
        run: |
          Write-Host "SQL_DBAEMISGroupDBAService"

      - name: Configure SQL Agent Job Operator 
        # Service Manager needs this job to run first
        # This step sets up the SQL_DBAAgentJobOperator service
        shell: powershell
        run: |
          Write-Host "SQL_DBAAgentJobOperator"

      - name: Deploy EMISServiceManager Database
        # This step deploys the EMISServiceManager database
        shell: powershell
        run: |
          Write-Host "SQL_DBAEMISServiceManagerDeploy"

      - name: Deploy BackoutStorage Database
        # This step deploys the BackoutStorage database
        shell: powershell
        run: |
          Write-Host "SQL_CreateBackoutStorageDB"






  Build_Configuration:
    runs-on: [self-hosted, windows]
    needs: Database_Deployments
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: servernames
      - name: Print servernames in build_configuration
        shell: powershell
        run: |
          $servers = Get-Content servernames.txt -Raw
          foreach ($server in $servers -split ',') {
            Write-Host "Build_configuration Server: $server"
          }

      - name: Set DBA Agent Owner
        # This step sets the DBA Agent Owner
        # Must be run before the EMIS Group DBA Config job
        shell: powershell
        run: |
          Write-Host "SQL_DBAAgentJobOwner"

      - name: Run EMISGroupDBA Configuration Job
        # This step runs the EMISGroupDBA configuration job
        shell: powershell
        run: |
          Write-Host "SQL_DBARunEMISGroupDBAConfigJob"


      - name: Check SQL Linked Servers
        # This step checks the SQL Linked Servers configuration
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckSysServers"

      - name: Set Read Committed Snapshot Isolation
        # This step sets the Read Committed Snapshot Isolation
        shell: powershell
        run: |
          Write-Host "SQL_DBAReadCommittedSnapshot"

      - name: Check Database Locations
        # This step checks the database locations
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckDBLocations"

      - name: SQL Agent Configuration
        # This step configures the SQL Agent settings
        shell: powershell
        run: |
          Write-Host "SQL_DBASQLAgentConfig"

      - name: Check SQL Server Max Server Memory
        # This step checks the SQL Server Max Server Memory settings
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckSQLMaxServerMemory"
          
      - name: Check Database Recovery Models
        # This step checks the recovery models of the databases
        shell: powershell
        run: |
          Write-Host "SQL_CheckDBRecoveryModels"      


  SQL_Failovers_and_Restarts:
    runs-on: [self-hosted, windows]
    needs: Build_Configuration
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: servernames
      - name: Print servernames in SQL_Failovers_and_Restarts
        shell: powershell
        run: |
          $servers = Get-Content servernames.txt -Raw
          foreach ($server in $servers -split ',') {
            Write-Host "SQL_Failovers_and_Restarts Server: $server"
          }

      - name: Check Is HADR Enabled
        # This step checks if High Availability and Disaster Recovery (HADR) is enabled
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckIsHADREnabled"  
          
      - name: Check AG Database Health
        # This step checks the health of the Always On Availability Group (AG) databases
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckAGDBHealthDetection"  

      - name: Check AG Failover Mode
        # This step checks the failover mode of the Always On Availability Group (AG)
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckAGFailoverMode"  


      - name: Check AG Endpoint URL
        # This step checks the URL of the Always On Availability Group (AG) endpoint
        shell: powershell
        run: |
          Write-Host "SQL_DBASQLCheckAGEndpointURL"  

      - name: Check AG RS Allow Connections
        # This step checks if the RS replica connections are allowed for the Always On Availability Group (AG)
        shell: powershell
        run: |
          Write-Host "SQL_DBASQLCheckSQLRSAllowConnections"  

      - name: Check AlwaysOn Extended Events is enabled
        # This step checks if the Always On Extended Events are enabled
        shell: powershell
        run: |
          Write-Host "SQL_CheckXEAlwaysOn"  

      - name: Set AGs to Manual Failover Mode
        # This step sets the Always On Availability Groups (AGs) to manual failover mode
        shell: powershell
        run: |
          Write-Host "SQL_SetAGFailoverModeManual"  

      - name: Restart SQL Server
        # This step restarts the SQL Server service
        shell: powershell
        run: |
          Write-Host "SQL_RestartSQL"  

      - name: Set AGs to Automatic Failover Mode
        # This step sets the Always On Availability Groups (AGs) to automatic failover mode
        shell: powershell
        run: |
          Write-Host "SQL_SetAGFailoverModeAutomatic"  

      - name: Test a planned SQL Server Failover
        # This step tests a planned failover of the SQL Server Always On Availability Groups (AGs)
        shell: powershell
        run: |
          Write-Host "SQL_FailoverAlwaysOnGroupsplanned"  

      - name: Test an unplanned SQL Server Failover
        # This step tests an unplanned failover of the SQL Server Always On Availability Groups (AGs)
        shell: powershell
        run: |
          Write-Host "SQL_FailoverAlwaysOnGroupsUnplanned"  


  Post_Restart_Configuration:
    runs-on: [self-hosted, windows]
    needs: SQL_Failovers_and_Restarts
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: servernames
      - name: Print servernames in Post_Restart_Configuration
        shell: powershell
        run: |
          $servers = Get-Content servernames.txt -Raw
          foreach ($server in $servers -split ',') {
            Write-Host "Post_Restart_Configuration Server: $server"
          }

      - name: Check TempDB
        # This step checks the TempDB configuration
        shell: powershell
        run: |
          Write-Host "SQL_DBACheckSQLTempDB"  

      - name: Check AG Database Health
        # This step checks the health of the Always On Availability Group (AG) databases after restart
        shell: powershell
        run: |
          Write-Host "SQL_CheckAGHealth"  


  Reporting_and_Monitoring:
    runs-on: [self-hosted, windows]
    needs: Post_Restart_Configuration
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: servernames
      - name: Print servernames in Reporting_and_Monitoring
        shell: powershell
        run: |
          $servers = Get-Content servernames.txt -Raw
          foreach ($server in $servers -split ',') {
            Write-Host "Post Restart Configuration Server: $server"
          }

      - name: Eweblogs - Configure EMISHealthBusinessIntelligence
        # This step configures the EMISHealthBusinessIntelligence weblogs
        shell: powershell
        run: |
          Write-Host "SQL_DBAEweblogsEMISHealthBusinessIntelligence"  

      - name: Eweblogs - Configure EMISWebMonitoringArchive
        # This step configures the EMISWebMonitoringArchive weblogs
        shell: powershell
        run: |
          Write-Host "SQL_DBAEweblogsEMISWebMonitoringArchive"        
      
      - name: Eweblogs - Configure EMISGroupDBA Configuration Linked Servers
        # This step configures the EMISGroupDBA Configuration Linked Servers weblogs
        shell: powershell
        run: |
          Write-Host "SQL_DBAEweblogsEMISGroupDBAConfigLinkedServers"        

      - name: Eweblogs - Configure EMISGroupDBA ReportingServers
        # This step configures the EMISGroupDBA ReportingServers weblogs
        shell: powershell
        run: |
          Write-Host "SQL_DBAEweblogsEMISGroupDBAReportingServers"  
          
      - name: Eweblogs - Configure ReportingServer RegisteredServers
        # This step configures the ReportingServer RegisteredServers weblogs
        shell: powershell
        run: |
          Write-Host "SQL_DBAEweblogsReportingServerRegisteredServers" 

      - name: Eweblogs - Configure System Response Times
        # This step configures the System Response Times weblogs
        shell: powershell
        run: |
          Write-Host "SQL_DBAEweblogSystemResponseTime" 

      - name: SentryOne configuration
        # This step configures the SentryOne monitoring tool
        shell: powershell
        run: |
          Write-Host "SQL_SentryOneDBAdditions"       