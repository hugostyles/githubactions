name: Build Test Workflow

on:
  workflow_dispatch:
    inputs:      
      servernames:        
        description: 'Comma-separated list of SQL Server names (e.g., SERVER1,SERVER2)'
        required: true
        default: 'F9NBPX3'
jobs:
    build-automation:
        runs-on: [self-hosted, windows]
        steps:
          - name: Checkout repository
            # Step to checkout the repository
            # This is necessary to access the SQL scripts and other files in the repository
            uses: actions/checkout@v4

          - name: Setup PowerShell environment
            # Step to set up the PowerShell environment
            shell: powershell
            run: Import-Module dbatools
          

          - name: Validate Parameters
            # Validate the input parameters to ensure they are not empty
            shell: powershell
            run: |
              Write-Host "Validating Parameters."
              ".\Build Functions\Functions-DBAVerifyParameters.ps1" -SQLServers "${{ github.event.inputs.servernames }}"



          - name: Get-SQL-Server-instances
            # Get SQL Server instances from the provided server names
            # This step uses the dbatools module to retrieve SQL Server instances
            shell: powershell
            run: |
              $servernames = "${{ github.event.inputs.servernames }}" -split ','
              
              # Initialize the instances.txt file to ensure it's empty before writing new data
              Set-Content -Path instances.txt -Value ""
              # Initialize the servers.txt file and store the server names
              Set-Content -Path servers.txt -Value $servernames

              Write-Host "============================================================"
              Write-Host "Getting SQL Server instances for ${servernames}"
              foreach ($server in $servernames) {
                # Loop through each server name provided in the input
                Write-Host "Processing server: $server"
                try {
                $instances = Get-DbaService -ComputerName $server -Type Engine -EnableException |
                ForEach-Object { "$($_.ComputerName)\$($_.InstanceName)" }
                Write-Host "SQL Server instances found:"
                $instances
                Write-Host "============================================================"
                # Save instances to file for later steps
                Add-Content -Path instances.txt -Value ($instances -join "`n")
                                
                } catch {
                Write-Host "Error: Failed to get SQL Server instances for ${server}."
                Write-Host "Exception Message: $($_.Exception.Message)"
                Write-Host "Exception Details: $($_ | Out-String)"
                exit 1
                }
                }
                #Cleanup the empty lines in the instances.txt file
                (Get-Content -Path instances.txt) | Where-Object { $_.Trim() -ne "" } | Set-Content -Path instances.txt           

          - name: Invoke-Check-DefaultPath
            shell: powershell
            run: |
                $instances = Get-Content -Path 'instances.txt'
                foreach ($instance in $instances) {
                    # Loop through each server name provided in the input
                    Write-Host "Processing server: $instance"
                    Write-Host "Checking defaultpath on: $instance"
                    Wtite-Host "Call the script for default path...."
                }
          - name: Invoke-Check-MaxServerMemory
            shell: powershell
            run: |
                $instances = Get-Content -Path 'instances.txt'            
                foreach ($instance in $instances) {
                    # Loop through each server name provided in the input
                    Write-Host "Processing server: $instance"
                    Write-Host "Checking memory on: $instance"
                    Wtite-Host "Call the script for memory check...."
                }
