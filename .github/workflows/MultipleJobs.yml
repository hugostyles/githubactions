name: Build Automation Jobs

on:
  workflow_dispatch:
    inputs:      
      servernames:        
        description: 'List of servers you require the run the build on (enter in Primary, Secondary, RS order) e.g., SERVER1,SERVER2'
        required: true
        default: 'F9NBPX3'
      authority:        
        description: 'England, Scotland, IoM, NI, Jersey, Wales etc'
        required: true
        default: 'England'

jobs:


  Prepare:
    runs-on: [self-hosted, windows]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup DBATools
        # Step to set up the PowerShell environment
        shell: powershell
        run: Import-Module dbatools


      - name: Validate Parameters
        # Validate the input parameters to ensure they are not empty
        shell: powershell
        run: |
          Write-Host "Validating Parameters."
          $script = ".\Build Functions\Functions-DBAVerifyParameters.ps1" 
          $servernames = "${{ github.event.inputs.servernames }}"
          $authority = "${{ github.event.inputs.authority }}"

          # Execute the script to validate the parameters
          & $script -SQLServers $servernames -Authority $authority -ErrorAction Stop        
        
      - name: Create servernames file
        shell: powershell
        run: |
          Set-Content -Path servernames.txt -Value "${{ github.event.inputs.servernames }}"

      - name: Upload servernames artifact
        uses: actions/upload-artifact@v4
        with:
          name: servernames
          path: servernames.txt

      # Get SQL Server instances from the provided server names
      - name: Get SQL Instance names
        # Get SQL Server instances from the provided server names
        # This step uses the dbatools module to retrieve SQL Server instances
        shell: powershell
        run: |
          $servernames = "${{ github.event.inputs.servernames }}" -split ','
          
          # Initialize the instances.txt file to ensure it's empty before writing new data
          Set-Content -Path instances.txt -Value ""

          Write-Host "============================================================"
          Write-Host "Getting SQL Server instances for ${servernames}"
          foreach ($server in $servernames) {
            # Loop through each server name provided in the input
            Write-Host "Processing server: $server"
            try {
            $instances = Get-DbaService -ComputerName $server -Type Engine -EnableException |
            ForEach-Object { "$($_.ComputerName)\$($_.InstanceName)" }
            Write-Host "SQL Server instances found:"
            $instances
            Write-Host "============================================================"
            # Save instances to file for later steps
            Add-Content -Path instances.txt -Value ($instances -join "`n")
                            
            } catch {
            Write-Host "Error: Failed to get SQL Server instances for ${server}."
            Write-Host "Exception Message: $($_.Exception.Message)"
            Write-Host "Exception Details: $($_ | Out-String)"
            exit 1
            }
            }
            #Cleanup the empty lines in the instances.txt file
            (Get-Content -Path instances.txt) | Where-Object { $_.Trim() -ne "" } | Set-Content -Path instances.txt           

      - name: Upload instances artifact
        uses: actions/upload-artifact@v4
        with:
          name: sqlinstances
          path: instances.txt


  Approval_Gate_1:
    runs-on: windows-latest
    needs: Prepare
    environment:
      name: approval-gate-1
    steps:
      - name: Wait for approval before proceeding. Verify parameters
        run: echo "Approval 1 granted."

  Pre_Build:
    runs-on: windows-latest
    needs: Approval_Gate_1
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: servernames

      - name: Print servernames in Pre Build
        shell: powershell
        run: |
          $servers = Get-Content servernames.txt -Raw
          foreach ($server in $servers -split ',') {
            Write-Host "Pre Build Server: $server"
          }

      

  Database_Deployments:
    runs-on: windows-latest
    needs: Pre_Build
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: servernames
      - name: Print servernames in database_deployments
        shell: powershell
        run: |
          $servers = Get-Content servernames.txt -Raw
          foreach ($server in $servers -split ',') {
            Write-Host "database_deployments Server: $server"
          }

  Build_Configuration:
    runs-on: windows-latest
    needs: Database_Deployments
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: servernames
      - name: Print servernames in build_configuration
        shell: powershell
        run: |
          $servers = Get-Content servernames.txt -Raw
          foreach ($server in $servers -split ',') {
            Write-Host "Build_configuration Server: $server"
          }

  Approval_Gate_2:
    runs-on: windows-latest
    needs: Build_Configuration
    environment:
      name: approval-gate-2
    steps:
      - name: Wait for approval before proceeding with failovers and restarts.
        run: echo "Approval 2 granted."

  SQL_Failovers_and_Restarts:
    runs-on: windows-latest
    needs: Approval_Gate_2
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: servernames
      - name: Print servernames in SQL_Failovers_and_Restarts
        shell: powershell
        run: |
          $servers = Get-Content servernames.txt -Raw
          foreach ($server in $servers -split ',') {
            Write-Host "SQL_Failovers_and_Restarts Server: $server"
          }

  Post_Restart_Configuration:
    runs-on: windows-latest
    needs: SQL_Failovers_and_Restarts
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: servernames
      - name: Print servernames in Post_Restart_Configuration
        shell: powershell
        run: |
          $servers = Get-Content servernames.txt -Raw
          foreach ($server in $servers -split ',') {
            Write-Host "Post_Restart_Configuration Server: $server"
          }

  Reporting_and_Monitoring:
    runs-on: windows-latest
    needs: Post_Restart_Configuration
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: servernames
      - name: Print servernames in Reporting_and_Monitoring
        shell: powershell
        run: |
          $servers = Get-Content servernames.txt -Raw
          foreach ($server in $servers -split ',') {
            Write-Host "Post Restart Configuration Server: $server"
          }